// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Riders.Tweakbox.API.Infrastructure.Common;

namespace Riders.Tweakbox.API.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210517232251_Add_StandardDeviation")]
    partial class Add_StandardDeviation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Riders.Tweakbox.API.Domain.Models.Database.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Riders.Tweakbox.API.Domain.Models.Database.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<int>("Country")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumGames1v1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGames2v2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGames2v2v2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGames2v2v2v2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGames3v3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGames4v4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGamesCustom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGamesSolo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGamesTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumWins1v1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumWins2v2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumWins2v2v2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumWins2v2v2v2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumWins3v3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumWins4v4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumWinsCustom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumWinsSolo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rating1v1")
                        .HasColumnType("REAL");

                    b.Property<float>("Rating2v2")
                        .HasColumnType("REAL");

                    b.Property<float>("Rating2v2v2")
                        .HasColumnType("REAL");

                    b.Property<float>("Rating2v2v2v2")
                        .HasColumnType("REAL");

                    b.Property<float>("Rating3v3")
                        .HasColumnType("REAL");

                    b.Property<float>("Rating4v4")
                        .HasColumnType("REAL");

                    b.Property<float>("RatingCustom")
                        .HasColumnType("REAL");

                    b.Property<float>("RatingSolo")
                        .HasColumnType("REAL");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("StandardDeviation1v1")
                        .HasColumnType("REAL");

                    b.Property<float>("StandardDeviation2v2")
                        .HasColumnType("REAL");

                    b.Property<float>("StandardDeviation2v2v2")
                        .HasColumnType("REAL");

                    b.Property<float>("StandardDeviation2v2v2v2")
                        .HasColumnType("REAL");

                    b.Property<float>("StandardDeviation3v3")
                        .HasColumnType("REAL");

                    b.Property<float>("StandardDeviation4v4")
                        .HasColumnType("REAL");

                    b.Property<float>("StandardDeviationCustom")
                        .HasColumnType("REAL");

                    b.Property<float>("StandardDeviationSolo")
                        .HasColumnType("REAL");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Riders.Tweakbox.API.Domain.Models.Database.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompletedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StageNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MatchType");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Riders.Tweakbox.API.Domain.Models.Database.PlayerRaceDetails", b =>
                {
                    b.Property<int>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Board")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Character")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FastestLapFrames")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinishTimeFrames")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rating")
                        .HasColumnType("REAL");

                    b.Property<float>("StdDev")
                        .HasColumnType("REAL");

                    b.Property<int>("TeamNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("RaceDetails");
                });

            modelBuilder.Entity("Riders.Tweakbox.API.Domain.Models.Database.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JwtId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Used")
                        .HasColumnType("INTEGER");

                    b.HasKey("Token");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Riders.Tweakbox.API.Domain.Models.Database.PlayerRaceDetails", b =>
                {
                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.Match", "Match")
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.ApplicationUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Riders.Tweakbox.API.Domain.Models.Database.RefreshToken", b =>
                {
                    b.HasOne("Riders.Tweakbox.API.Domain.Models.Database.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Riders.Tweakbox.API.Domain.Models.Database.Match", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
